/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Avatar : AvatarBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using uFrame.IOC;
	using uFrame.Kernel;
	using uFrame.Kernel.Serialization;
	using uFrame.MVVM;
	using uFrame.MVVM.Bindings;
	using uFrame.MVVM.ViewModels;
	using UniRx;

	// defined in */scripts/entity_defs/Avatar.def
	public class AvatarCreateCellClientCommand:uFrame.MVVM.ViewModels.ViewModelCommand{ public float arg1; public Int32 arg2; }

	// Please inherit and implement "class Avatar : AvatarBase"
	public abstract class AvatarBase : uFrame.MVVM.ViewModels.ViewModel
	{
		public EntityBaseEntityCall_AvatarBase baseEntityCall = null;
		public EntityCellEntityCall_AvatarBase cellEntityCall = null;


		private P<Byte> _levelProperty = new P<Byte>();
		public virtual P<Byte> levelProperty { get { return _levelProperty; } set { _levelProperty = value; } }
		public virtual Byte level { get { return levelProperty.Value; } set { levelProperty.Value = value; } }
		//tpublic Byte level = 1;
		public virtual void onLevelChanged(Byte oldValue) {}

		private P<Int32> _massProperty = new P<Int32>();
		public virtual P<Int32> massProperty { get { return _massProperty; } set { _massProperty = value; } }
		public virtual Int32 mass { get { return massProperty.Value; } set { massProperty.Value = value; } }
		//tpublic Int32 mass = 10;
		public virtual void onMassChanged(Int32 oldValue) {}

		private P<Byte> _modelIDProperty = new P<Byte>();
		public virtual P<Byte> modelIDProperty { get { return _modelIDProperty; } set { _modelIDProperty = value; } }
		public virtual Byte modelID { get { return modelIDProperty.Value; } set { modelIDProperty.Value = value; } }
		//tpublic Byte modelID = 0;
		public virtual void onModelIDChanged(Byte oldValue) {}

		private P<float> _modelScaleProperty = new P<float>();
		public virtual P<float> modelScaleProperty { get { return _modelScaleProperty; } set { _modelScaleProperty = value; } }
		public virtual float modelScale { get { return modelScaleProperty.Value; } set { modelScaleProperty.Value = value; } }
		//tpublic float modelScale = 0.3;
		public virtual void onModelScaleChanged(float oldValue) {}

		private P<float> _moveSpeedProperty = new P<float>();
		public virtual P<float> moveSpeedProperty { get { return _moveSpeedProperty; } set { _moveSpeedProperty = value; } }
		public virtual float moveSpeed { get { return moveSpeedProperty.Value; } set { moveSpeedProperty.Value = value; } }
		//tpublic float moveSpeed = 6.5;
		public virtual void onMoveSpeedChanged(float oldValue) {}

		private P<string> _nameProperty = new P<string>();
		public virtual P<string> nameProperty { get { return _nameProperty; } set { _nameProperty = value; } }
		public virtual string name { get { return nameProperty.Value; } set { nameProperty.Value = value; } }
		//tpublic string name = 0;
		public virtual void onNameChanged(string oldValue) {}

		private P<SByte> _stateProperty = new P<SByte>();
		public virtual P<SByte> stateProperty { get { return _stateProperty; } set { _stateProperty = value; } }
		public virtual SByte state { get { return stateProperty.Value; } set { stateProperty.Value = value; } }
		//tpublic SByte state = 0;
		public virtual void onStateChanged(SByte oldValue) {}

		public virtual void CreateCellClient(float arg1, Int32 arg2){ this.Execute(new AvatarCreateCellClientCommand(){ arg1 = arg1 , arg2 = arg2 }); }
		private Signal<AvatarCreateCellClientCommand> _CreateCellClientCommand;
		public virtual Signal<AvatarCreateCellClientCommand> CreateCellClientCommand { get { return _CreateCellClientCommand; } set { _CreateCellClientCommand = value; } }
		public virtual void Execute(AvatarCreateCellClientCommand argument) { this.CreateCellClientCommand.OnNext(argument); }

		public AvatarBase(uFrame.Kernel.IEventAggregator aggregator) :base(aggregator) 
		{
			_CreateCellClientCommand = new Signal<AvatarCreateCellClientCommand>(this);
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AvatarBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AvatarBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["AvatarViewModel"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.useMethodDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
				methodUtype = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				case 2:
					float CreateCellClient_arg1 = stream.readFloat();
					Int32 CreateCellClient_arg2 = stream.readInt32();
					CreateCellClient(CreateCellClient_arg1, CreateCellClient_arg2);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["AvatarViewModel"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 5:
						Byte oldval_level = level;
						level = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onLevelChanged(oldval_level);
						}
						else
						{
							if(inWorld)
								onLevelChanged(oldval_level);
						}

						break;
					case 4:
						Int32 oldval_mass = mass;
						mass = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onMassChanged(oldval_mass);
						}
						else
						{
							if(inWorld)
								onMassChanged(oldval_mass);
						}

						break;
					case 9:
						Byte oldval_modelID = modelID;
						modelID = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onModelIDChanged(oldval_modelID);
						}
						else
						{
							if(inWorld)
								onModelIDChanged(oldval_modelID);
						}

						break;
					case 7:
						float oldval_modelScale = modelScale;
						modelScale = stream.readFloat();

						if(prop.isBase())
						{
							if(inited)
								onModelScaleChanged(oldval_modelScale);
						}
						else
						{
							if(inWorld)
								onModelScaleChanged(oldval_modelScale);
						}

						break;
					case 6:
						float oldval_moveSpeed = moveSpeed;
						moveSpeed = stream.readFloat();

						if(prop.isBase())
						{
							if(inited)
								onMoveSpeedChanged(oldval_moveSpeed);
						}
						else
						{
							if(inWorld)
								onMoveSpeedChanged(oldval_moveSpeed);
						}

						break;
					case 2:
						string oldval_name = name;
						name = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onNameChanged(oldval_name);
						}
						else
						{
							if(inWorld)
								onNameChanged(oldval_name);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					case 8:
						SByte oldval_state = state;
						state = stream.readInt8();

						if(prop.isBase())
						{
							if(inited)
								onStateChanged(oldval_state);
						}
						else
						{
							if(inWorld)
								onStateChanged(oldval_state);
						}

						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["AvatarViewModel"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			Byte oldval_level = level;
			Property prop_level = pdatas[4];
			if(prop_level.isBase())
			{
				if(inited && !inWorld)
					onLevelChanged(oldval_level);
			}
			else
			{
				if(inWorld)
				{
					if(prop_level.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLevelChanged(oldval_level);
					}
				}
			}

			Int32 oldval_mass = mass;
			Property prop_mass = pdatas[5];
			if(prop_mass.isBase())
			{
				if(inited && !inWorld)
					onMassChanged(oldval_mass);
			}
			else
			{
				if(inWorld)
				{
					if(prop_mass.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMassChanged(oldval_mass);
					}
				}
			}

			Byte oldval_modelID = modelID;
			Property prop_modelID = pdatas[6];
			if(prop_modelID.isBase())
			{
				if(inited && !inWorld)
					onModelIDChanged(oldval_modelID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelIDChanged(oldval_modelID);
					}
				}
			}

			float oldval_modelScale = modelScale;
			Property prop_modelScale = pdatas[7];
			if(prop_modelScale.isBase())
			{
				if(inited && !inWorld)
					onModelScaleChanged(oldval_modelScale);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelScale.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelScaleChanged(oldval_modelScale);
					}
				}
			}

			float oldval_moveSpeed = moveSpeed;
			Property prop_moveSpeed = pdatas[8];
			if(prop_moveSpeed.isBase())
			{
				if(inited && !inWorld)
					onMoveSpeedChanged(oldval_moveSpeed);
			}
			else
			{
				if(inWorld)
				{
					if(prop_moveSpeed.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMoveSpeedChanged(oldval_moveSpeed);
					}
				}
			}

			string oldval_name = name;
			Property prop_name = pdatas[9];
			if(prop_name.isBase())
			{
				if(inited && !inWorld)
					onNameChanged(oldval_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onNameChanged(oldval_name);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			SByte oldval_state = state;
			Property prop_state = pdatas[10];
			if(prop_state.isBase())
			{
				if(inited && !inWorld)
					onStateChanged(oldval_state);
			}
			else
			{
				if(inWorld)
				{
					if(prop_state.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onStateChanged(oldval_state);
					}
				}
			}

		}
	}
	public partial class AvatarViewModel: AvatarBase { public AvatarViewModel(uFrame.Kernel.IEventAggregator aggregator):base(aggregator) {  } }
}